!<arch>
0-isupper.c/    0           0     0     644     210       `
#include <ctype.h>
#include "main.h"
/**
 * _isupper - function name
 * @c: a parameter
 * Return: 1 if true, 0 if false
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     286       `
#include "main.h"
/**
 * _memset - a function to fill memory with a constant byte
 * @s: memory area
 * @b:  constant byte
 * @n: size
 * Return: memory area s
*/
char *_memset(char *s, char b, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     353       `
#include "main.h"
/**
 * _strcat - a function to concatenate 2 strings
 * @dest: an array
 * @src: an array
 * Return: return value od dest
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     389       `
#include "main.h"
/**
 * _atoi - finction namr
 * @s: parameter
 * Return: return a value
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
	if (s[c] == 45)
	{
		min *= -1;
	}
	while (s[c] >= 48 && s[c] <= 57)
	{
		isi = 1;
		ni = (ni * 10) + (s[c] - '0');
		c++;
	}
	if (isi == 1)
	{
		break;
	}
	c++;
	}
	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     192       `
#include "main.h"
/**
 * _isdigit - function name
 * @c: a parameter
 * Return: 1 for true,  for false
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     329       `
#include "main.h"
/**
 * _memcpy  - a function to fill memory with a constant byte
 * @dest: memory area
 * @src:  memory area
 * @n: size
 * Return: memory area dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
/**
	int i = 0;
	int j = 0;

	for (; i < j; i++)
	{
		dest(i) = src(i);
		n--;
	}
	return (dest);
*/
}

1-strncat.c/    0           0     0     644     385       `
#include "main.h"
/**
* _strncat - a function name
* @dest: array name
* @src: array name
* @n: number of array elements
* Return: return the value if dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     288       `
#include "main.h"
/**
 *  _strchr - a function to fill memory with a constant byte
 * @s: memory area
 * @c:  a char data type
 * Return: memory area dest
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     225       `
#include "main.h"
/**
 * _strlen  - prints the length of a string
 * @s: a character
 * Return: return the value of a
 */
int _strlen(char *s)
{
	int longi = 0;

	while (*s != '\0')
	{
		longi++;
		s++;
	}
	return (longi);
}

2-strncpy.c/    0           0     0     644     347       `
#include "main.h"
/**
 * _strncpy - function name
 * @dest: an array
 * @scr: an array
 * @n: number of element in array
 * Return: tbevalue of dest
 */
char *_strncpy(char *dest, char *scr, int n)
{
	int j;

	j = 0;
	while (j < n && scr[j] != '\0')
	{
		dest[j] = scr[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     180       `
#include "main.h"
/**
 * _islower - function name
 * @c: an integer
 * Return: 1 for success
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     179       `
#include "main.h"
/**
 * _puts - a function
 * @str: an array
 */
void _puts(char *str)
{
	int a = 0;

	while (str[a] != '\0')
	{
		_putchar(str[a]);
		a++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     301       `
#include "main.h"
/**
 * _strcmp - function to compare 2 strings
 * @s1 : string 1
 * @s2 : string 2
 * Return: always 0
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     451       `
#include "main.h"
/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: memory area
 * @accept:  memory area
 * Return: number of bytes in the initial segment of s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				n++;
				break;
			}
			else if (accept[i] + 1 == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isalpha - function name
 * @c: parameter to be checked
 * Return: always 0
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     394       `
#include "main.h"
/**
 * _strpbrk - a function that locates the first occurrence in the string s
* @s: points to a string
* @accept: points to a string
* Return: a pointer to the string s or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
	s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     481       `
#include "main.h"
/**
* _strstr - a function that finds the first occurrence of the a substring
* @haystack: points to a substring
* @needle: points to a string
* Return: a pointer to the beginning of the located substring else NULL
*/
char *_strstr(char *haystack, char *needle)
{
	for (; haystack <= '\0'; haystack++)
	{
		char *d = haystack;
		char *e = needle;

		while (*d == *e && *e != '\0')
		{
			d++;
			e++;
		}
		if (*e == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     228       `
#include "main.h"
/**
 * _abs - function name
 * @c: character to checked
 * Return: return c
 * abs_val - negates c
 */
int _abs(int c)
{
	if (c < 0)
	{
		int abs_val;

		abs_val = c * -1;
		return (abs_val);
	}
	return (c);
}
9-strcpy.c/     0           0     0     644     250       `
#include "main.h"
/**
 *_strcpy - function name
 * @dest: pointer
 * @src: pointer
 * Return: rest the valkuue off dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

